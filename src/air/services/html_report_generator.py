"""HTML report generator for analysis findings."""

from datetime import datetime
from pathlib import Path


def generate_findings_html(findings_list: list[dict], output_path: Path, project_name: str = "AIR Project") -> None:
    """Generate HTML findings report.

    Args:
        findings_list: List of finding dictionaries
        output_path: Path to write HTML file
        project_name: Name of the project
    """
    # Group findings by repository
    repos = {}
    for idx, finding in enumerate(findings_list, 1):
        finding["id"] = f"{idx:03d}"
        repo = finding.get("source", "unknown")
        if repo not in repos:
            repos[repo] = []
        repos[repo].append(finding)

    # Calculate summary statistics
    severity_counts = {}
    category_counts = {}
    for finding in findings_list:
        sev = finding.get("severity", "info")
        cat = finding.get("category", "unknown")
        severity_counts[sev] = severity_counts.get(sev, 0) + 1
        category_counts[cat] = category_counts.get(cat, 0) + 1

    # Generate HTML
    html = _generate_html(
        findings_list=findings_list,
        repos=repos,
        severity_counts=severity_counts,
        category_counts=category_counts,
        project_name=project_name,
    )

    # Write to file
    output_path.write_text(html)


def _generate_html(
    findings_list: list[dict],
    repos: dict[str, list[dict]],
    severity_counts: dict[str, int],
    category_counts: dict[str, int],
    project_name: str,
) -> str:
    """Generate complete HTML document."""
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M")

    # Severity emojis
    severity_emoji = {
        "critical": "⚠️",
        "high": "⚠️",
        "medium": "⚡",
        "low": "ℹ️",
        "info": "·",
    }

    html = f"""<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AIR Analysis Findings Report - {project_name}</title>
    <style>
        {_get_css()}
    </style>
</head>
<body>
    <header>
        <h1>Analysis Findings Report</h1>
        <div class="report-meta">
            <span>📊 Project: {project_name}</span>
            <span>📅 Generated: {timestamp}</span>
            <span>🔍 Total Findings: {len(findings_list)}</span>
            <span>📦 Repositories: {len(repos)}</span>
        </div>
    </header>

    <section id="summary">
        <h2>Executive Summary</h2>
        <div class="severity-breakdown">
            {_render_severity_badges(severity_counts, severity_emoji)}
        </div>
        <div class="category-breakdown">
            {_render_category_badges(category_counts)}
        </div>
    </section>

    <section id="toc">
        <h2>Findings Summary</h2>
        <table class="findings-table">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Repository</th>
                    <th>Severity</th>
                    <th>Category</th>
                    <th>Title</th>
                    <th>Location</th>
                </tr>
            </thead>
            <tbody>
                {_render_toc_rows(findings_list, severity_emoji)}
            </tbody>
        </table>
    </section>

    <section id="repositories">
        <h2>Detailed Findings by Repository</h2>
        {_render_repo_sections(repos, severity_emoji)}
    </section>

    <footer>
        <p>Generated by <strong>AIR Toolkit</strong> v0.6.2.post1</p>
        <p>🤖 AI Review & Development Toolkit</p>
    </footer>
</body>
</html>"""
    return html


def _get_css() -> str:
    """Get embedded CSS styles."""
    return """
        * { margin: 0; padding: 0; box-sizing: border-box; }

        body {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
            line-height: 1.6;
            color: #1f2937;
            background: #f9fafb;
            padding: 2rem;
        }

        .container { max-width: 1200px; margin: 0 auto; }

        header {
            background: white;
            padding: 2rem;
            border-radius: 0.5rem;
            margin-bottom: 2rem;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }

        header h1 { color: #111827; margin-bottom: 1rem; }

        .report-meta {
            display: flex;
            gap: 1.5rem;
            flex-wrap: wrap;
            color: #6b7280;
            font-size: 0.875rem;
        }

        section {
            background: white;
            padding: 2rem;
            border-radius: 0.5rem;
            margin-bottom: 2rem;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }

        h2 {
            color: #111827;
            margin-bottom: 1.5rem;
            padding-bottom: 0.5rem;
            border-bottom: 2px solid #e5e7eb;
        }

        .severity-breakdown, .category-breakdown {
            display: flex;
            gap: 1rem;
            flex-wrap: wrap;
            margin-bottom: 1rem;
        }

        .badge {
            padding: 0.5rem 1rem;
            border-radius: 0.375rem;
            font-weight: 500;
            font-size: 0.875rem;
        }

        .badge-critical { background: #fee2e2; color: #991b1b; }
        .badge-high { background: #fed7aa; color: #9a3412; }
        .badge-medium { background: #fef3c7; color: #92400e; }
        .badge-low { background: #dbeafe; color: #1e40af; }
        .badge-info { background: #e5e7eb; color: #374151; }
        .badge-category { background: #f3f4f6; color: #4b5563; }

        .findings-table {
            width: 100%;
            border-collapse: collapse;
            font-size: 0.875rem;
        }

        .findings-table th {
            background: #f9fafb;
            padding: 0.75rem;
            text-align: left;
            font-weight: 600;
            border-bottom: 2px solid #e5e7eb;
        }

        .findings-table td {
            padding: 0.75rem;
            border-bottom: 1px solid #e5e7eb;
        }

        .findings-table tr:hover { background: #f9fafb; }

        .repo-section {
            border-left: 4px solid #3b82f6;
            padding-left: 1.5rem;
            margin-bottom: 2rem;
        }

        .repo-section h3 {
            color: #1f2937;
            margin-bottom: 1rem;
        }

        .repo-summary {
            display: flex;
            gap: 1.5rem;
            margin-bottom: 1.5rem;
            font-size: 0.875rem;
            color: #6b7280;
        }

        .finding {
            border: 1px solid #e5e7eb;
            border-radius: 0.5rem;
            padding: 1.5rem;
            margin-bottom: 1.5rem;
            background: #fafafa;
        }

        .finding.critical { border-left: 4px solid #dc2626; }
        .finding.high { border-left: 4px solid #ea580c; }
        .finding.medium { border-left: 4px solid #f59e0b; }
        .finding.low { border-left: 4px solid #3b82f6; }

        .finding-header {
            display: flex;
            align-items: center;
            gap: 1rem;
            margin-bottom: 1rem;
        }

        .finding-id {
            background: #e5e7eb;
            color: #374151;
            padding: 0.25rem 0.5rem;
            border-radius: 0.25rem;
            font-family: monospace;
            font-size: 0.875rem;
        }

        .finding h4 { color: #111827; margin-bottom: 0.75rem; }

        .finding-meta {
            display: flex;
            gap: 1.5rem;
            font-size: 0.875rem;
            color: #6b7280;
            margin-bottom: 1rem;
        }

        .finding-description { margin-bottom: 1rem; }

        .finding-suggestion {
            background: #ecfdf5;
            border-left: 3px solid #10b981;
            padding: 1rem;
            border-radius: 0.375rem;
            margin-top: 1rem;
        }

        .finding-suggestion strong { color: #065f46; }

        .back-to-top {
            float: right;
            color: #3b82f6;
            text-decoration: none;
            font-size: 0.875rem;
        }

        .back-to-top:hover { text-decoration: underline; }

        footer {
            text-align: center;
            padding: 2rem;
            color: #6b7280;
            font-size: 0.875rem;
        }

        a { color: #3b82f6; text-decoration: none; }
        a:hover { text-decoration: underline; }

        @media print {
            body { background: white; }
            .back-to-top { display: none; }
        }
    """


def _render_severity_badges(counts: dict[str, int], emoji: dict[str, str]) -> str:
    """Render severity badge HTML."""
    html = []
    for sev in ["critical", "high", "medium", "low", "info"]:
        count = counts.get(sev, 0)
        if count > 0:
            html.append(
                f'<span class="badge badge-{sev}">{emoji.get(sev, "·")} {count} {sev.capitalize()}</span>'
            )
    return "\n".join(html)


def _render_category_badges(counts: dict[str, int]) -> str:
    """Render category badge HTML."""
    html = []
    for cat, count in sorted(counts.items(), key=lambda x: x[1], reverse=True):
        html.append(f'<span class="badge badge-category">{cat}: {count}</span>')
    return "\n".join(html)


def _render_toc_rows(findings: list[dict], emoji: dict[str, str]) -> str:
    """Render table of contents rows."""
    rows = []
    for finding in findings:
        fid = finding["id"]
        repo = finding.get("source", "unknown")
        severity = finding.get("severity", "info")
        category = finding.get("category", "unknown")
        title = finding.get("title", finding.get("type", "No title"))
        location = finding.get("location", "")
        line_number = finding.get("line_number")

        if line_number:
            location = f"{location}:{line_number}"

        rows.append(f'''
            <tr class="severity-{severity}">
                <td><a href="#finding-{fid}">{fid}</a></td>
                <td><a href="#repo-{repo}">{repo}</a></td>
                <td>{emoji.get(severity, "·")} {severity.capitalize()}</td>
                <td>{category}</td>
                <td>{title[:80]}</td>
                <td><code>{location[:40] if location else "-"}</code></td>
            </tr>
        ''')
    return "\n".join(rows)


def _render_repo_sections(repos: dict[str, list[dict]], emoji: dict[str, str]) -> str:
    """Render repository sections with findings."""
    sections = []

    for repo, findings in sorted(repos.items()):
        # Calculate repo statistics
        critical = sum(1 for f in findings if f.get("severity") == "critical")
        high = sum(1 for f in findings if f.get("severity") == "high")
        medium = sum(1 for f in findings if f.get("severity") == "medium")
        low = sum(1 for f in findings if f.get("severity") == "low")

        sections.append(f'''
        <article id="repo-{repo}" class="repo-section">
            <h3>Repository: {repo}</h3>
            <div class="repo-summary">
                <span>📊 Findings: {len(findings)}</span>
                <span>⚠️ Critical: {critical}, High: {high}</span>
                <span>⚡ Medium: {medium}, Low: {low}</span>
            </div>
            {_render_findings(findings, emoji)}
        </article>
        ''')

    return "\n".join(sections)


def _render_findings(findings: list[dict], emoji: dict[str, str]) -> str:
    """Render individual finding cards."""
    cards = []

    for finding in findings:
        fid = finding["id"]
        severity = finding.get("severity", "info")
        category = finding.get("category", "unknown")
        title = finding.get("title", finding.get("type", "No title"))
        description = finding.get("description", finding.get("reasoning", ""))
        location = finding.get("location", "")
        line_number = finding.get("line_number")
        suggestion = finding.get("suggestion", "")

        if line_number:
            location = f"{location}:{line_number}"

        cards.append(f'''
        <div id="finding-{fid}" class="finding {severity}">
            <div class="finding-header">
                <span class="finding-id">{fid}</span>
                <span class="badge badge-{severity}">{emoji.get(severity, "·")} {severity.upper()}</span>
                <span class="badge badge-category">{category}</span>
                <a href="#toc" class="back-to-top">↑ Back to top</a>
            </div>
            <h4>{title}</h4>
            <div class="finding-meta">
                {f'<span>📁 {location}</span>' if location else ''}
            </div>
            <div class="finding-description">
                <p>{description}</p>
            </div>
            {f'<div class="finding-suggestion"><strong>💡 Suggestion:</strong> {suggestion}</div>' if suggestion else ''}
        </div>
        ''')

    return "\n".join(cards)
