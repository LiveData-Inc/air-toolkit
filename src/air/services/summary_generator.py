"""Generate summaries from task information."""

import json
from collections import Counter
from datetime import datetime
from pathlib import Path

from air.services.task_parser import TaskInfo, get_all_task_info


def generate_statistics(task_info_list: list[TaskInfo]) -> dict:
    """Generate statistics from task list.

    Args:
        task_info_list: List of parsed task info

    Returns:
        Dictionary of statistics
    """
    total = len(task_info_list)
    outcomes = Counter(info.outcome for info in task_info_list if info.outcome)

    # Collect all unique files
    all_files = set()
    for info in task_info_list:
        all_files.update(info.files_changed)

    # Get date range
    timestamps = [info.timestamp for info in task_info_list if info.timestamp]
    if timestamps:
        earliest = min(timestamps)
        latest = max(timestamps)
        date_range = f"{earliest.strftime('%Y-%m-%d')} to {latest.strftime('%Y-%m-%d')}"
    else:
        date_range = "Unknown"

    return {
        "total_tasks": total,
        "success": outcomes.get("success", 0),
        "in_progress": outcomes.get("in_progress", 0),
        "partial": outcomes.get("partial", 0),
        "blocked": outcomes.get("blocked", 0),
        "unknown": outcomes.get("unknown", 0),
        "files_touched": len(all_files),
        "date_range": date_range,
    }


def generate_markdown_summary(
    task_info_list: list[TaskInfo], project_name: str = "AIR Project"
) -> str:
    """Generate markdown summary.

    Args:
        task_info_list: List of parsed task info
        project_name: Name of the project

    Returns:
        Markdown formatted summary
    """
    stats = generate_statistics(task_info_list)

    lines = [
        f"# {project_name} - Task Summary",
        "",
        f"**Generated:** {datetime.now().strftime('%Y-%m-%d %H:%M UTC')}",
        f"**Period:** {stats['date_range']}",
        "",
        "## Statistics",
        "",
        f"- **Total Tasks:** {stats['total_tasks']}",
        f"- **Completed:** {stats['success']} ✅",
        f"- **In Progress:** {stats['in_progress']} ⏳",
        f"- **Partial:** {stats['partial']} ⚠️",
        f"- **Blocked:** {stats['blocked']} 🚫",
        f"- **Files Touched:** {stats['files_touched']}",
        "",
    ]

    if task_info_list:
        lines.extend([
            "## Tasks",
            "",
        ])

        for info in task_info_list:
            # Task header
            status_emoji = {
                "success": "✅",
                "in_progress": "⏳",
                "partial": "⚠️",
                "blocked": "🚫",
            }.get(info.outcome or "unknown", "❓")

            date_str = info.timestamp.strftime("%Y-%m-%d") if info.timestamp else "Unknown"
            lines.append(f"### {status_emoji} {info.title}")
            lines.append("")
            lines.append(f"**Date:** {date_str}")

            if info.prompt:
                # Truncate long prompts
                prompt = info.prompt[:200] + "..." if len(info.prompt) > 200 else info.prompt
                lines.append(f"**Prompt:** {prompt}")

            if info.actions:
                lines.append(f"**Actions:** {len(info.actions)} items")

            if info.files_changed:
                lines.append(f"**Files Changed:** {len(info.files_changed)}")
                for file in info.files_changed[:5]:  # Show first 5
                    lines.append(f"  - {file}")
                if len(info.files_changed) > 5:
                    lines.append(f"  - ... and {len(info.files_changed) - 5} more")

            lines.append("")

    lines.extend([
        "---",
        "",
        f"*Generated by AIR Toolkit v0.2.0*",
        "",
    ])

    return "\n".join(lines)


def generate_json_summary(
    task_info_list: list[TaskInfo], project_name: str = "AIR Project"
) -> str:
    """Generate JSON summary.

    Args:
        task_info_list: List of parsed task info
        project_name: Name of the project

    Returns:
        JSON formatted summary
    """
    stats = generate_statistics(task_info_list)

    tasks = []
    for info in task_info_list:
        tasks.append({
            "filename": info.filename,
            "title": info.title,
            "date": info.date,
            "timestamp": info.timestamp.isoformat() if info.timestamp else None,
            "prompt": info.prompt,
            "outcome": info.outcome,
            "actions_count": len(info.actions),
            "files_changed": info.files_changed,
            "files_count": len(info.files_changed),
        })

    summary = {
        "project": project_name,
        "generated": datetime.now().isoformat(),
        "statistics": stats,
        "tasks": tasks,
    }

    return json.dumps(summary, indent=2)


def generate_text_summary(task_info_list: list[TaskInfo]) -> str:
    """Generate plain text summary.

    Args:
        task_info_list: List of parsed task info

    Returns:
        Plain text formatted summary
    """
    stats = generate_statistics(task_info_list)

    lines = [
        "AI TASK SUMMARY",
        "=" * 60,
        "",
        f"Total Tasks: {stats['total_tasks']}",
        f"Completed:   {stats['success']}",
        f"In Progress: {stats['in_progress']}",
        f"Partial:     {stats['partial']}",
        f"Blocked:     {stats['blocked']}",
        f"Files:       {stats['files_touched']}",
        f"Period:      {stats['date_range']}",
        "",
        "RECENT TASKS",
        "-" * 60,
        "",
    ]

    for info in task_info_list[:10]:  # Show 10 most recent
        date_str = info.timestamp.strftime("%Y-%m-%d") if info.timestamp else "Unknown"
        outcome_str = (info.outcome or "unknown").upper()
        lines.append(f"[{date_str}] {outcome_str}: {info.title}")

    if len(task_info_list) > 10:
        lines.append("")
        lines.append(f"... and {len(task_info_list) - 10} more tasks")

    lines.append("")
    lines.append("=" * 60)

    return "\n".join(lines)
