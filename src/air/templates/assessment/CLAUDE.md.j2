# CLAUDE.md

**Project:** {{ name }}
**Mode:** {{ mode }}

This file provides instructions for AI assistants (Claude Code, etc.) working in this assessment project.

## Project Overview

This is an AIR assessment project for analyzing and comparing codebases.

**Your Role:**
{% if mode == "review" -%}
- Review linked resources in `repos/` (READ-ONLY)
- Create analysis documents in `analysis/reviews/`
- Generate executive summary
{% elif mode == "develop" -%}
- Develop THIS project directly (with .air/ tracking)
- Work on code in src/, tests/, docs/, etc.
- All development happens in this project itself
{% else -%}
- Review external resources in `repos/` (READ-ONLY)
- Create analysis for reviewed resources
- Develop this project with .air/ task tracking
{% endif -%}

## CRITICAL: Task Tracking

**REQUIRED:** Create a task file for EVERY piece of work:

```python
from datetime import datetime, timezone
from pathlib import Path

timestamp = datetime.now(timezone.utc).strftime("%Y%m%d-%H%M")
description = "task-description"  # kebab-case
filename = f".air/tasks/{timestamp}-{description}.md"

content = f"""# Task: Brief Description

## Date
{datetime.now(timezone.utc).strftime('%Y-%m-%d %H:%M UTC')}

## Prompt
[User's exact words]

## Actions Taken
1. [What you did]

## Files Changed
- `path/to/file` - [What and why]

## Outcome
⏳ In Progress / ✅ Success / ⚠️ Partial / ❌ Blocked

[Summary]
"""

Path(filename).write_text(content)
```

## Linked Resources

{% if mode == "review" or mode == "mixed" -%}
### Review Resources (READ-ONLY)

Located in `repos/` - These are symlinks. NEVER attempt to modify.

**Your Tasks:**
1. Analyze architecture and design patterns
2. Identify strengths and weaknesses
3. Create analysis documents in `analysis/reviews/`
4. Compare implementations if multiple repos

**Analysis Format:**
- One file per resource: `analysis/reviews/{resource-name}.md`
- Comparison document: `analysis/reviews/comparison.md`
- Executive summary: `analysis/SUMMARY.md`

{% endif -%}
{% if mode == "develop" or mode == "mixed" -%}
### Development Resources

{% if mode == "develop" -%}
This IS your project - work directly on it.
{% else -%}
External repos linked in `repos/` with DEVELOPER relationship.
{% endif -%}

**Your Tasks:**
1. Work on code in standard project structure (src/, tests/, docs/)
2. Use .air/ for task tracking
3. For external repos with DEVELOPER relationship, create PRs with prepared changes in `contributions/{resource-name}/`
4. Submit via `air pr {resource-name}`

{% if mode == "mixed" -%}
**Contribution Format:**
- Place in `contributions/{resource-name}/`
- Include clear explanation in commit message
- Reference original files being improved
{% endif -%}

{% endif -%}

## Commands You Should Use

### Check Project Status
```bash
# Check if air is available
which air

# If available, use it
air status --format=json
air validate --format=json
```

### Task Management
```bash
# Create task (or use Python directly)
air task new "description"

# List tasks
air task list                # Active tasks only
air task list --all          # Include archived
air task list --archived     # Archived only

# Archive old tasks (to keep .air/tasks/ clean)
air task archive 20251003-1430           # Archive specific task
air task archive --before=2025-09-01     # Archive before date
air task archive --all --dry-run         # Preview what would be archived

# Restore if needed
air task restore 20251003-1430

# Generate summary
air summary
```

### Validation
```bash
# Validate structure
air validate

# Fix issues
air validate --fix
```

## Workflow

### 1. Start Any Work
```python
# ALWAYS create task file first
from datetime import datetime, timezone
from pathlib import Path

timestamp = datetime.now(timezone.utc).strftime("%Y%m%d-%H%M")
# ... create task file
```

### 2. Review Resources
{% if mode == "review" or mode == "mixed" -%}
- Read code in `repos/{resource}/`
- Document findings as you go
- Create analysis documents
{% endif -%}
{% if mode == "develop" or mode == "mixed" -%}
- Work directly on this project's code
- Track work in .air/tasks/
- Follow standard development practices
{% endif -%}

### 3. Create Analysis
{% if mode == "review" or mode == "mixed" -%}
- Write to `analysis/reviews/{resource}.md`
- Include: architecture, patterns, strengths, weaknesses
- Add comparison if multiple resources
{% endif -%}
{% if mode == "develop" and mode != "mixed" -%}
- This is a development project - focus on building, not analyzing
{% endif -%}

### 4. Create Contributions (if external DEVELOPER repos)
{% if mode == "mixed" -%}
- For external repos with DEVELOPER relationship, create in `contributions/{resource}/`
- Match original file structure
- Include clear documentation
{% endif -%}

### 5. Finalize Task
```python
# Update task file with outcome
# ✅ Success / ⚠️ Partial / ❌ Blocked
```

### 6. Archive Tasks (Periodic Cleanup)
```bash
# Keep .air/tasks/ clean by archiving completed work
# Archive old tasks (recommended: monthly or when > 20 tasks)
air task archive --before=2025-09-01

# Or archive all completed tasks
air task archive --all

# Tasks move to .air/tasks/archive/YYYY-MM/ by default
# Still accessible with: air task list --all
```

## Important Rules

1. **Never Modify Review Resources**: Resources in `repos/` with REVIEW_ONLY relationship are READ-ONLY symlinks
2. **Always Track Tasks**: Create task file before starting work
3. **Use Structured Output**: Follow analysis formats above
4. **Check Air Availability**: Use `which air` before trying air commands
5. **Validate Before Finishing**: Run `air validate` before marking complete

## Analysis Template

When creating analysis documents, use this structure:

```markdown
# Analysis: {Resource Name}

## Overview
[Brief description]

## Architecture
[System design, components, patterns]

## Strengths
- [What's done well]

## Weaknesses
- [What could improve]

## Recommendations
- [Specific suggestions]

## Technical Details
[Deep dive into implementation]
```

## Context Files

Review these for project-specific guidance:
- `.air/context/architecture.md` - Architecture patterns to look for
- `.air/context/language.md` - Language-specific conventions

## Questions?

If you're unsure about:
- Project structure: Run `air validate`
- What to analyze: Check README.md goals
- Where to put output: See project structure above
- How to contribute: Check contribution workflow

---

**Remember**: Document everything in task files. They create a complete audit trail of all analysis work.
